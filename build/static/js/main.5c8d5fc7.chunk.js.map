{"version":3,"sources":["components/form.js","components/weatherInfo.js","App.js","reportWebVitals.js","index.js"],"names":["form","props","action","onSubmit","gettingWeather","type","name","weatherInfo","console","log","className","state","temp","date","nowDayOfweek","nowDay","nowMonth","weatherMain","API_KEY","App","allMonth","dayOfWeek","Date","getDate","getDay","getMonth","cityName","windSpeed","error","undefined","e","a","preventDefault","CITY","target","elements","city","value","fetch","API_URL","json","DATA","setState","Math","round","main","currentCityName","weather","wind","speed","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAaeA,EAXF,SAACC,GACV,OACI,8BACI,uBAAMC,OAAO,GAAGC,SAAUF,EAAMG,eAAhC,UACI,uBAAOC,KAAK,OAAOC,KAAK,SACxB,qHCuCDC,EA3CK,SAACN,GAEjB,OADAO,QAAQC,IAAIR,GAER,8BAWI,qBAAKS,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,UAAf,SACI,sBAAKA,UAAU,OAAf,UAAuBT,EAAMU,MAAMC,KAAK,0CAG5C,sBAAKF,UAAU,WAAf,UACI,sBAAKA,UAAU,KAAf,UACI,uBAAMA,UAAU,OAAhB,UAAwBT,EAAMU,MAAME,KAAKC,aAAzC,OACA,uBAAMJ,UAAU,MAAhB,UAAuBT,EAAMU,MAAME,KAAKE,OAAxC,OACA,uBAAML,UAAU,QAAhB,UAAyBT,EAAMU,MAAME,KAAKG,SAA1C,UAEJ,qBAAKN,UAAU,OAAf,SAAuBT,EAAMU,MAAMM,oBAG3C,qBAAKP,UAAU,MAAf,SACI,cAAC,EAAD,CAAMN,eAAgBH,EAAMG,2BC1B9Cc,G,MAAU,oCA4DDC,E,4MAzDXC,SAAW,CAAC,uCAAS,6CAAU,2BAAO,uCAAS,qBAAM,2BAAO,2BAAO,6CAAU,mDAAW,6CAAU,uCAAS,8C,EAC3GC,UAAY,CAAC,qEAAc,qEAAc,6CAAU,iCAAQ,6CAAU,6CAAU,8C,EAC/EV,MAAQ,CAEJE,KAAM,CACFE,QAAQ,IAAIO,MAAOC,UACnBT,aAAc,EAAKO,WAAW,IAAIC,MAAOE,UACzCR,SAAU,EAAKI,UAAU,IAAIE,MAAOG,aAExCb,KAAM,GACNc,SAAU,QACVT,YAAa,QACbU,UAAW,EACXC,WAAOC,G,EAIXzB,e,uCAAiB,WAAO0B,GAAP,mBAAAC,EAAA,yDAEbD,EAAEE,mBACIC,EAAOH,EAAEI,OAAOC,SAASC,KAAKC,OAHvB,iCAMaC,MAAM,kEAAD,OACwBL,EADxB,kBACsCf,EADtC,gCANlB,cAMHqB,EANG,gBASUA,EAAQC,OATlB,OASHC,EATG,OAWT,EAAKC,SAAS,CACV9B,KAAM+B,KAAKC,MAAMH,EAAKI,KAAKjC,MAC3Bc,SAAUe,EAAKnC,KACfwC,gBAAiBb,EACjBhB,YAAawB,EAAKM,QAAQ,GAAGF,KAC7BlB,UAAWc,EAAKO,KAAKC,MACrBrB,WAAOC,IAjBF,wBAoBT,EAAKa,SAAS,CACV9B,UAAMiB,EACNH,cAAUG,EACVZ,iBAAaY,EACbF,eAAWE,EACXD,MAAO,8EAzBF,4C,6GAiCjB,OACI,8BACI,cAAC,EAAD,CAASjB,MAAOuC,KAAKvC,MAAOP,eAAgB8C,KAAK9C,uB,GArD3C+C,IAAMC,WCETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5c8d5fc7.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst form = (props) => {\r\n    return(\r\n        <div>\r\n            <form action=\"\" onSubmit={props.gettingWeather}>\r\n                <input type=\"text\" name='city'/>\r\n                <button>Узнать погоду</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default form;","import React from 'react'\r\nimport Form from \"./form\";\r\n\r\nconst weatherInfo = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <div>\r\n            {/*{props.state.cityName &&\r\n                <div>\r\n                <p>Ваш город: {props.state.currentCityName}</p>\r\n                <p>Температура: {props.state.temp}</p>\r\n                <p>Состояние: {props.state.weatherMain}</p>\r\n                <p>Скорость ветра: {props.state.windSpeed}</p>\r\n                </div>\r\n            }\r\n            <p>{props.state.error}</p>*/}\r\n\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"top\">\r\n                        <div className=\"topLeft\">\r\n                            <div className=\"temp\">{props.state.temp}<span>c</span></div>\r\n\r\n                        </div>\r\n                        <div className=\"topRight\">\r\n                            <div className=\"up\">\r\n                                <span className=\"week\">{props.state.date.nowDayOfweek} </span>\r\n                                <span className=\"day\">{props.state.date.nowDay} </span>\r\n                                <span className=\"month\">{props.state.date.nowMonth} </span>\r\n                            </div>\r\n                            <div className=\"down\">{props.state.weatherMain}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mid\">\r\n                        <Form gettingWeather={props.gettingWeather}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default weatherInfo;","import React from 'react';\n\nimport Info from './components/info';\nimport Form from './components/form';\nimport Weather from './components/weatherInfo'\nimport {bindReporter} from \"web-vitals/dist/lib/bindReporter\";\n\n//http://api.openweathermap.org/data/2.5/weather?q=Kiev,ua&appid=5f23db2d3b401de70c6efbae717f779f&units=metric\nconst API_KEY = '2e60b37cc2189f25f3097bf412777960';\n\nclass App extends React.Component{\n    allMonth = ['января','февраля','мара','апреля','мая','июня','июля','августа','сентября','октября','ноября','декабря'];\n    dayOfWeek = ['Воскресенье','Понедельник','Вторник','Среда','Четверг','Пятница','Суббота',]\n    state = {\n\n        date: {\n            nowDay: new Date().getDate(),\n            nowDayOfweek: this.dayOfWeek[(new Date().getDay())],\n            nowMonth: this.allMonth[(new Date().getMonth())],\n        },\n        temp: 21,\n        cityName: 'minsk',\n        weatherMain: 'cloud',\n        windSpeed: 5,\n        error: undefined,\n    }\n\n\n    gettingWeather = async (e) => {\n\n        e.preventDefault();\n        const CITY = e.target.elements.city.value;\n\n        if (CITY){\n            const API_URL = await fetch(`\n            http://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${API_KEY}&units=metric\n            `);\n            const DATA = await API_URL.json();\n\n            this.setState({\n                temp: Math.round(DATA.main.temp),\n                cityName: DATA.name,\n                currentCityName: CITY,\n                weatherMain: DATA.weather[0].main,\n                windSpeed: DATA.wind.speed,\n                error: undefined,\n            });\n        }else{\n            this.setState({\n                temp: undefined,\n                cityName: undefined,\n                weatherMain: undefined,\n                windSpeed: undefined,\n                error: 'Введите город',\n            });\n        }\n\n    }\n    render() {\n\n\n    return (\n        <div>\n            <Weather state={this.state} gettingWeather={this.gettingWeather}/>\n        </div>\n    )\n    }\n}\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './components/styles/weatherinfo.css';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}